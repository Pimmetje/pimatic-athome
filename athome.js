// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(env) {
    var AHRCSwitchElro, AHSensorValue, AHSwitchElro, AHSwitchFS20, AHTransport, AtHomePlugin, Q, SerialPort, assert, atHomePlugin, convict, _;
    convict = env.require("convict");
    Q = env.require('q');
    assert = env.require('cassert');
    SerialPort = require('serialport').SerialPort;
    _ = env.require('lodash');
    AtHomePlugin = (function(_super) {
      __extends(AtHomePlugin, _super);

      function AtHomePlugin() {
        this.receiveCommandCallback = __bind(this.receiveCommandCallback, this);
        return AtHomePlugin.__super__.constructor.apply(this, arguments);
      }

      AtHomePlugin.transport;

      AtHomePlugin.prototype.init = function(app, framework, config) {
        var serialName;
        this.framework = framework;
        env.logger.info("atHome: init");
        this.conf = convict(_.cloneDeep(require("./athome-plugin-config-schema")));
        this.conf.load(config);
        this.conf.validate();
        this.isDemo = this.conf.get("demo");
        serialName = this.conf.get("serialDeviceName");
        env.logger.info("atHome: init with serial device name " + serialName + "  demo " + this.isDemo);
        this.cmdReceivers = [];
        if (!this.isDemo) {
          return this.transport = new AHTransport(serialName, this.receiveCommandCallback);
        }
      };

      AtHomePlugin.prototype.createDevice = function(deviceConfig) {
        var rswitch, value;
        env.logger.info("atHome: createDevice " + deviceConfig.id);
        switch (deviceConfig["class"]) {
          case 'AHSwitchFS20':
            this.framework.registerDevice(new AHSwitchFS20(deviceConfig));
            return true;
          case 'AHSwitchElro':
            this.framework.registerDevice(new AHSwitchElro(deviceConfig));
            return true;
          case 'AHRCSwitchElro':
            rswitch = new AHRCSwitchElro(deviceConfig);
            this.cmdReceivers.push(rswitch);
            this.framework.registerDevice(rswitch);
            return true;
          case 'AHSensorValue':
            value = new AHSensorValue(deviceConfig, this.isDemo);
            this.cmdReceivers.push(value);
            this.framework.registerDevice(value);
            return true;
          default:
            return false;
        }
      };

      AtHomePlugin.prototype.sendCommand = function(id, cmdString) {
        if (!this.isDemo) {
          return this.transport.sendCommand(id, cmdString);
        }
      };

      AtHomePlugin.prototype.receiveCommandCallback = function(cmdString) {
        var cmdReceiver, handled, _i, _len, _ref, _results;
        _ref = this.cmdReceivers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cmdReceiver = _ref[_i];
          handled = cmdReceiver.handleReceivedCmd(cmdString);
          if (handled) {
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return AtHomePlugin;

    })(env.plugins.Plugin);
    AHTransport = (function() {
      AHTransport.serial;

      function AHTransport(serialPortName, receiveCommandHandler) {
        this.receiveCommandHandler = receiveCommandHandler;
        this.cmdString = "";
        this.serial = new SerialPort(serialPortName, {
          baudrate: 57600
        }, false);
        this.serial.open(function(err) {
          if ((err != null)) {
            return env.logger.info("open serialPort " + serialPortName + " failed " + err);
          } else {
            return env.logger.info("open serialPort " + serialPortName);
          }
        });
        this.serial.on('open', function() {
          return this.write('echo\n');
        });
        this.serial.on('error', function(err) {
          return env.logger.error("atHome: serial error " + err);
        });
        this.serial.on('data', (function(_this) {
          return function(data) {
            var dataString, parts;
            env.logger.debug("atHome: serial data received " + data);
            dataString = "" + data;
            dataString = dataString.replace(/[\r]/g, '');
            if (dataString.indexOf('\n') !== -1) {
              parts = dataString.split('\n');
              _this.cmdString = _this.cmdString + parts[0];
              _this.receiveCommandHandler(_this.cmdString);
              if (parts.length > 0) {
                return _this.cmdString = parts[1];
              } else {
                return _this.cmdString = '';
              }
            } else {
              return _this.cmdString = _this.cmdString + dataString;
            }
          };
        })(this));
      }

      AHTransport.prototype.sendCommand = function(id, cmdString) {
        env.logger.debug("AtHomeTransport: " + id + " sendCommand " + cmdString);
        return this.serial.write(cmdString + '\n');
      };

      return AHTransport;

    })();
    AHSwitchFS20 = (function(_super) {
      __extends(AHSwitchFS20, _super);

      function AHSwitchFS20(deviceconfig) {
        this.conf = convict(_.cloneDeep(require("./athome-device-fs20-config-schema")));
        this.conf.load(deviceconfig);
        this.conf.validate();
        this.id = this.conf.get("id");
        this.name = this.conf.get("name");
        this.houseid = this.conf.get("houseid");
        this.deviceid = this.conf.get("deviceid");
        AHSwitchFS20.__super__.constructor.call(this);
      }

      AHSwitchFS20.prototype.changeStateTo = function(state) {
        if (this._state === state) {
          return Q(true);
        } else {
          return Q.fcall((function(_this) {
            return function() {
              var cmd;
              cmd = 'F ' + _this.houseid + _this.deviceid;
              atHomePlugin.sendCommand(_this.id, (state === true ? cmd + '10' : cmd + '00'));
              return _this._setState(state);
            };
          })(this));
        }
      };

      return AHSwitchFS20;

    })(env.devices.PowerSwitch);
    AHSwitchElro = (function(_super) {
      __extends(AHSwitchElro, _super);

      function AHSwitchElro(deviceconfig) {
        this.conf = convict(_.cloneDeep(require("./athome-device-elro-config-schema")));
        this.conf.load(deviceconfig);
        this.conf.validate();
        this.id = this.conf.get("id");
        this.name = this.conf.get("name");
        this.houseid = this.conf.get("houseid");
        this.deviceid = this.conf.get("deviceid");
        AHSwitchElro.__super__.constructor.call(this);
      }

      AHSwitchElro.prototype.changeStateTo = function(state) {
        if (this._state === state) {
          return Q(true);
        } else {
          return Q.fcall((function(_this) {
            return function() {
              var cmd;
              cmd = 'E ' + _this.houseid + ' ' + _this.deviceid;
              atHomePlugin.sendCommand(_this.id, (state === true ? cmd + ' 1' : cmd + ' 0'));
              return _this._setState(state);
            };
          })(this));
        }
      };

      return AHSwitchElro;

    })(env.devices.PowerSwitch);
    AHRCSwitchElro = (function(_super) {
      __extends(AHRCSwitchElro, _super);

      function AHRCSwitchElro(deviceconfig) {
        this.conf = convict(_.cloneDeep(require("./athome-device-elro-config-schema")));
        this.conf.load(deviceconfig);
        this.conf.validate();
        this.id = this.conf.get("id");
        this.name = this.conf.get("name");
        this.houseid = this.conf.get("houseid");
        this.deviceid = this.conf.get("deviceid");
        this.changeStateTo(false);
        AHRCSwitchElro.__super__.constructor.call(this);
      }

      AHRCSwitchElro.prototype.changeStateTo = function(state) {
        if (this._state === state) {
          return Q(true);
        } else {
          return Q.fcall((function(_this) {
            return function() {
              return _this._setState(state);
            };
          })(this));
        }
      };

      AHRCSwitchElro.prototype.handleReceivedCmd = function(command) {
        var params;
        params = command.split(" ");
        if (params.length < 4 || params[0] !== "E" || params[1] !== this.houseid || params[2] !== this.deviceid) {
          return false;
        }
        if (params[3] === '1') {
          this.changeStateTo(true);
        } else {
          this.changeStateTo(false);
        }
        return true;
      };

      return AHRCSwitchElro;

    })(env.devices.PowerSwitch);
    AHSensorValue = (function(_super) {
      __extends(AHSensorValue, _super);

      AHSensorValue.prototype.value = null;

      AHSensorValue.prototype.getTemplateName = function() {
        return "device";
      };

      function AHSensorValue(deviceconfig, demo) {
        this.conf = convict(_.cloneDeep(require("./athome-sensorvalue-config-schema")));
        this.conf.load(deviceconfig);
        this.conf.validate();
        this.id = this.conf.get("id");
        this.name = this.conf.get("name");
        this.sensorid = this.conf.get("sensorid");
        this.scale = this.conf.get("scale");
        this.offset = this.conf.get("offset");
        this.value = 0;
        this.attributes = {
          value: {
            description: "the sensor value",
            type: Number,
            label: this.conf.get("label"),
            unit: this.conf.get("unit")
          }
        };
        if (demo) {
          setInterval((function(_this) {
            return function() {
              return _this.updateDemoValue();
            };
          })(this), 3000);
        }
        AHSensorValue.__super__.constructor.call(this);
      }

      AHSensorValue.prototype.getValue = function() {
        return Q(this.value);
      };

      AHSensorValue.prototype.handleReceivedCmd = function(command) {
        var params;
        params = command.split(" ");
        if (params.length < 3 || params[0] !== "SV" || params[1] !== this.sensorid) {
          return false;
        }
        this.value = parseInt(params[2], 10) * this.scale + this.offset;
        this.emit("value", this.value);
        return true;
      };

      AHSensorValue.prototype.updateDemoValue = function() {
        this.value = this.value + 50;
        return this.emit("value", this.value);
      };

      return AHSensorValue;

    })(env.devices.Sensor);
    atHomePlugin = new AtHomePlugin;
    return atHomePlugin;
  };

}).call(this);
